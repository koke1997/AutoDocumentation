import re
from typing import Optional, Dict, Any

class DocumentationProcessor:
    """Processes and enhances documentation generated by Claude."""
    
    def process_documentation(self, 
                             raw_documentation: str, 
                             language: str,
                             doc_format: str) -> str:
        """
        Process the raw documentation from Claude.
        
        Args:
            raw_documentation: Raw documentation text from Claude
            language: Programming language of the code
            doc_format: Format of the documentation (markdown, rst, etc.)
            
        Returns:
            Processed documentation text
        """
        if not raw_documentation:
            return "No documentation generated."
        
        # Remove any filepath comments
        if raw_documentation.startswith("// filepath:"):
            raw_documentation = "\n".join(raw_documentation.split("\n")[1:])
        
        # Remove ALL debug output patterns
        # This more aggressive approach removes multiple patterns we've seen
        patterns_to_remove = [
            r"getWindowArguments \[\].*?(?=\n\n|\Z)",
            r"App is installed.*?(?=\n\n|\Z)",
            r"Checking for updates.*?(?=\n\n|\Z)",
            r"checking for updates.*?(?=\n\n|\Z)",
            r"Checking for update.*?(?=\n\n|\Z)"
        ]
        
        for pattern in patterns_to_remove:
            raw_documentation = re.sub(pattern, "", raw_documentation, flags=re.IGNORECASE | re.DOTALL)
        
        # Clean up multiple consecutive newlines
        raw_documentation = re.sub(r'\n{3,}', '\n\n', raw_documentation)
        
        # Fix RST heading formats (ensure proper underline length)
        if doc_format in ["rst", "sphinx"]:
            lines = raw_documentation.split("\n")
            i = 0
            while i < len(lines) - 1:
                # Check if the next line is an underline
                if i + 1 < len(lines) and lines[i+1] and all(c == '=' or c == '-' or c == '~' for c in lines[i+1]):
                    # If the underline is too short or too long
                    if len(lines[i+1]) != len(lines[i]):
                        char = lines[i+1][0]  # Get the character used (=, -, ~)
                        lines[i+1] = char * len(lines[i])
                i += 1
            raw_documentation = "\n".join(lines)
        
        # Add note about auto-generation if not present
        if "auto-generated" not in raw_documentation.lower() and "generated by" not in raw_documentation.lower():
            note = ".. note::\n   This documentation was auto-generated using Claude.\n\n" if doc_format in ["rst", "sphinx"] else "*This documentation was auto-generated using Claude.*\n\n"
            raw_documentation = note + raw_documentation
        
        return raw_documentation